/*	ByteBuffer.p
 
	Copyright 2019 Andrew Hooper
	
	This file is part of the P10 Compiler.
	
	The P10 Compiler is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
class std.io.ByteBuffer

#buf byte[]
#mrk int : -1
#pos int : 0
#lim int
#cap int
// 0 ≤ mrk ≤ pos ≤ lim ≤ cap

/** Returns this buffer's capacity.
 */
capacity() int
	return cap
.

/** Clears this buffer.
 */
clear()
	pos : 0
	lim : 0
	mrk : -1
.

/** Returns this buffer's limit.
 */
limit() int
	return lim
.

/** Sets this buffer's limit.
 */
limit(newLimit int) ByteBuffer
	//TODO validate newLimit < cap
	lim : newLimit
	return this
.

/** Sets this buffer's mark at its position.
 */
mark() ByteBuffer
	mrk : pos
	return this
.

/** Returns this buffer's position.
 */
position() int
	return pos
.

/** Sets this buffer's position.
 */
position(newPosition int) ByteBuffer
//TODO
	return this
.

/** Returns the number of elements between the current position and the limit.
 */
remaining() int
	return lim - pos
.

/*
abstract Object	array()
// Returns the array that backs this buffer  (optional operation).
abstract int	arrayOffset()
// Returns the offset within this buffer's backing array of the first element of the buffer  (optional operation).
Buffer	flip()
// Flips this buffer.
abstract boolean	hasArray()
// Tells whether or not this buffer is backed by an accessible array.
boolean	hasRemaining()
// Tells whether there are any elements between the current position and the limit.
abstract boolean	isReadOnly()
// Tells whether or not this buffer is read-only.
Buffer	reset()
// Resets this buffer's position to the previously-marked position.
Buffer	rewind()
// Rewinds this buffer.
*/